# Generated by Django 5.0.1 on 2024-01-28 10:40

import ckeditor_uploader.fields
import django.core.validators
import django.db.models.deletion
import django_resized.forms
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('slug', models.SlugField(max_length=255, unique=True, verbose_name='Slug')),
            ],
            options={
                'verbose_name': 'Course Category',
                'verbose_name_plural': 'Course Categories',
                'db_table': 'course_categories',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Instructor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('full_name', models.CharField(max_length=255, verbose_name='Full Name')),
                ('title', models.CharField(max_length=255, verbose_name='Title')),
                ('avatar', django_resized.forms.ResizedImageField(crop=['middle', 'center'], force_format=None, keep_meta=True, quality=90, scale=None, size=[240, 240], upload_to='course/instructor/avatars', verbose_name='Avatar')),
                ('description', models.TextField(verbose_name='Description')),
                ('website', models.URLField(blank=True, null=True, verbose_name='Website')),
                ('facebook', models.URLField(blank=True, null=True, verbose_name='Facebook')),
                ('twitter', models.URLField(blank=True, null=True, verbose_name='Twitter')),
                ('linkedin', models.URLField(blank=True, null=True, verbose_name='Linkedin')),
                ('telegram', models.URLField(blank=True, null=True, verbose_name='Telegram')),
                ('total_course_taught', models.PositiveIntegerField(default=0, verbose_name='Total Course Taught')),
            ],
            options={
                'verbose_name': 'Course Instructor',
                'verbose_name_plural': 'Course Instructors',
                'db_table': 'course_instructors',
                'ordering': ('full_name',),
            },
        ),
        migrations.CreateModel(
            name='TextLesson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('slug', models.SlugField(max_length=255, unique=True, verbose_name='Slug')),
                ('description', ckeditor_uploader.fields.RichTextUploadingField(verbose_name='Description')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Order')),
                ('view_time', models.PositiveIntegerField(blank=True, default=0, verbose_name='View time in minutes')),
                ('content', ckeditor_uploader.fields.RichTextUploadingField(verbose_name='Content')),
            ],
            options={
                'verbose_name': 'Text Lesson',
                'verbose_name_plural': 'Text Lessons',
                'db_table': 'course_text_lessons',
                'ordering': ('order',),
            },
        ),
        migrations.CreateModel(
            name='VideoLesson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('slug', models.SlugField(max_length=255, unique=True, verbose_name='Slug')),
                ('description', ckeditor_uploader.fields.RichTextUploadingField(verbose_name='Description')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Order')),
                ('view_time', models.PositiveIntegerField(blank=True, default=0, verbose_name='View time in minutes')),
                ('video', models.FileField(upload_to='course/videos', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['mp4', 'avi', 'mkv'])], verbose_name='Video')),
                ('thumbnail', django_resized.forms.ResizedImageField(crop=['middle', 'center'], force_format=None, keep_meta=True, quality=90, scale=None, size=[1080, 566], upload_to='course/thumbnails', verbose_name='Thumbnail')),
            ],
            options={
                'verbose_name': 'Video Lesson',
                'verbose_name_plural': 'Video Lessons',
                'db_table': 'course_video_lessons',
                'ordering': ('order',),
            },
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('slug', models.SlugField(max_length=255, unique=True, verbose_name='Slug')),
                ('description', ckeditor_uploader.fields.RichTextUploadingField(verbose_name='Description')),
                ('is_free', models.BooleanField(default=False, verbose_name='Is Free?')),
                ('cover_image', django_resized.forms.ResizedImageField(crop=['middle', 'center'], force_format=None, keep_meta=True, quality=90, scale=None, size=[1080, 566], upload_to='course/cover_images', verbose_name='Cover Image')),
                ('certificate_file', models.FileField(blank=True, null=True, upload_to='course/certificate_files', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['html'])], verbose_name='Certificate File')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('published', 'Published'), ('hidden', 'Hidden')], default='draft', max_length=20, verbose_name='Status')),
                ('language', models.CharField(choices=[('en', 'English'), ('uz', 'Uzbek'), ('ru', 'Russian'), ('tg', 'Tadjik'), ('kk', 'Kazakh'), ('ky', 'Krgyz'), ('ar', 'Arabic'), ('zh', 'Chinese'), ('fr', 'French'), ('de', 'German'), ('hi', 'Hindi'), ('it', 'Italian'), ('ja', 'Japanese'), ('ko', 'Korean'), ('pt', 'Portuguese'), ('es', 'Spanish'), ('tr', 'Turkish'), ('other', 'Other')], default='uz', max_length=10, verbose_name='Language')),
                ('view_time', models.PositiveIntegerField(default=0, verbose_name='View time in minutes')),
                ('instructors', models.ManyToManyField(related_name='courses', to='course.instructor', verbose_name='Instructors')),
            ],
            options={
                'verbose_name': 'Course',
                'verbose_name_plural': 'Courses',
                'db_table': 'courses',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Module',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('slug', models.SlugField(max_length=255, unique=True, verbose_name='Slug')),
                ('description', ckeditor_uploader.fields.RichTextUploadingField(verbose_name='Description')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Order')),
                ('view_time', models.PositiveIntegerField(default=0, verbose_name='View time in minutes')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='modules', to='course.course', verbose_name='Course')),
            ],
            options={
                'verbose_name': 'Course Module',
                'verbose_name_plural': 'Course Modules',
                'db_table': 'course_modules',
                'ordering': ('order',),
            },
        ),
        migrations.CreateModel(
            name='Lesson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('object_id', models.PositiveIntegerField(verbose_name='Object ID')),
                ('description', models.CharField(verbose_name='Description')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Order')),
                ('lesson_type', models.ForeignKey(limit_choices_to={'model__in': ('textlesson', 'videolesson')}, on_delete=django.db.models.deletion.PROTECT, related_name='lessons', to='contenttypes.contenttype', verbose_name='Lesson Type')),
                ('module', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='lessons', to='course.module', verbose_name='Module')),
            ],
            options={
                'verbose_name': 'Course Lesson',
                'verbose_name_plural': 'Course Lessons',
                'db_table': 'course_lessons',
                'ordering': ('order',),
            },
        ),
        migrations.CreateModel(
            name='SubCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('slug', models.SlugField(max_length=255, unique=True, verbose_name='Slug')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='subcategories', to='course.category', verbose_name='Category')),
            ],
            options={
                'verbose_name': 'Course SubCategory',
                'verbose_name_plural': 'Course SubCategories',
                'db_table': 'course_subcategories',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('slug', models.SlugField(max_length=255, unique=True, verbose_name='Slug')),
                ('subcategory', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='topics', to='course.subcategory', verbose_name='SubCategory')),
            ],
            options={
                'verbose_name': 'Course Topic',
                'verbose_name_plural': 'Course Topics',
                'db_table': 'course_topics',
                'ordering': ('name',),
            },
        ),
        migrations.AddField(
            model_name='course',
            name='topic',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='courses', to='course.topic', verbose_name='Topic'),
        ),
    ]
